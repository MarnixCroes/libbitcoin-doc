{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>\u26a0\ufe0f Both the documentation and Libbitcoin V4 are a work in progress.</p>"},{"location":"FAQ/","title":"Frequently Asked Questions","text":""},{"location":"FAQ/#how-does-initial-block-download-ibd-work","title":"How does Initial Block Download (IBD) work?","text":"<p>Libbitcoin is designed to perform as high performance IBD as possible. This means that it will fully utilize peer connections and hardware resources (CPU, RAM).</p> <p>IBD is done in the following way:</p> <p>Libbitcoin connects to 100 peers and will request and validate block headers from all peers. Once the (strongest) header chain is current (defeault is 1h from tip) and contains the minimum work, it will start downloading blocks from the peers. This is done in parrallel across the peers (the blocks don't have to be downloaded in order). By default this is done in concurrencies of 50000 blocks.</p> <p>Validation will be done of the downloaded blocks after each concurrency. Meaning that, by default, it will download 50k blocks -&gt; validate the blocks -&gt; download the next 50k blocks -&gt; validate, and so forth until the tip.</p> <p>Validation means doing the consensus checks of each block, including full validation of the scripts and transactions of the blocks.</p> <p>As a final phase is the confirmation phase. This does the fully ordered check of the full chain. For example, no double spends across the chain.</p>"},{"location":"FAQ/#how-is-libbitcoin-different-from-bitcoin-core","title":"How is Libbitcoin different from Bitcoin Core?","text":"<p>Libbitcoin and Bitcoin Core are two different implementations of the Bitcoin protocol.</p> <p>The main architectural differences are:</p> <ul> <li>Libbitcoin is a developer toolkit, with a modular design</li> </ul> <p>Libbitcoin has several separate libraries that can be used independently, meaning that things like node, network and database are separate from each other. Whereas Bitcoin Core has a monolithic architecture where everything is in the same codebase and interconnected.</p> <ul> <li>Libbitcoin focuses on performance and scaling of the software</li> </ul> <p>Libbitcoin has an asynchronous design that allows for efficient event-driven actions and parallelism.  Better hardware and bandwidth results in better node performance (like faster IBD).  This makes the software scalable and future proof (as hardware specs and bandwidth keep increasing (Moore's Law)).</p> <ul> <li>No UTXO set</li> </ul> <p>Libbitcoin does not store a UTXO set (like Bitcoin Core) but stores the full indexed chain.</p> <ul> <li>Libbitcoin keeps it minimal</li> </ul> <p>Things like new wallet features and GUI's are not being worked on, they can be built on top of or used with Libbitcoin but are not part of Libbitcoin itself.</p>"},{"location":"FAQ/#does-libbitcoin-support-taproot","title":"Does Libbitcoin support Taproot?","text":"<p>Yes, Taproot is supported since Libbitcoin version 4.</p> <p>Wallet functionalities such as P2TR address generation and transaction building are not yet supported.</p>"},{"location":"FAQ/#how-to-run-a-libbitcoin-node","title":"How to run a Libbitcoin node?","text":"<p>To run a Libbitcoin node, a Libbitcoin Server should be run. However, as the Server is still a work in progress, solely the node can be run for testing purposes.</p> <p>Install the required dependencies: boost &amp; libsecp256k1.</p> <p>Build the required libraries: libbitcoin-system, libbitcoin-network, libbitcoin-database &amp; libbitcoin-node.</p> <p>Then run the resulting <code>bn</code> executable.</p> <p>See step-by-step instructions here.</p>"},{"location":"FAQ/#what-are-the-dependencies","title":"What are the dependencies?","text":"<p>Libbitcoin uses as few dependencies as possible:</p> <p>A minimal libbitcoin build requires boost and libsecp256k1.  ZeroMQ is needed for client and/or server. ICU (International Components for Unicode) is an optional dependency which is only required when BIP 38 and BIP 39 are being used with libbitcoin-explorer.</p> <p></p>"},{"location":"FAQ/#which-bips-are-supported","title":"Which BIP's are supported?","text":"<p>BIP-9, BIP-16*, BIP-21, BIP-30*, BIP-31, BIP-32, BIP-34*, BIP-35, BIP-38, BIP-39, BIP-42*, BIP-61, BIP-65*, BIP-66*, BIP-68*, BIP-90*, BIP-112*, BIP-113*, BIP-130, BIP-133, BIP-141*, BIP-143*, BIP-144, BIP-147*, BIP-152, BIP-155, BIP-157, BIP-341*, BIP-342*.</p> <p>*soft fork, enabled by default</p>"},{"location":"FAQ/#does-libbitcoin-support-pruning","title":"Does Libbitcoin support pruning?","text":"<p>No, Libbitcoin does not allow to prune the chain.</p> <p>The two main reason are:</p> <ul> <li>If everyone would prune the chain, new nodes would not be able to bootstrap.</li> <li>Disk space is cheap and becoming cheaper every year. As the chain growth is lineair (fixed size) and hardware growth is exponential (Moore's law) disk space is even less of a worry each year.</li> </ul>"},{"location":"FAQ/#is-it-possible-to-mine-using-libbitcoin","title":"Is it possible to mine using Libbitcoin?","text":"<p>Libbitcoin does not currently have a mining interface, although anyone is free to build on top of/using Libbitcoin.</p> <p>Implementing a mining interface is a future plan.</p>"},{"location":"FAQ/#does-libbitcoin-have-a-gui","title":"Does Libbitcoin have a GUI?","text":"<p>No, Libbitcoin does not have a Graphical User Interface. However, Libbitcoin can build an Electrum index which can be used to connect a GUI (wallet), like Electrum.</p>"},{"location":"FAQ/#does-a-different-node-implementation-like-libbitcoin-have-unintentional-chain-split-risk","title":"Does a different node implementation, like Libbitcoin, have unintentional chain split risk?","text":"<p>Bitcoin is a highly complex system, as a result each update to client software can contain unintentional chain split risk. In fact, this has happened twice to Bitcoin Core (BIP 50, BIP 66).</p> <p>Libbitcoin has not had such an unintentional fork since it's existence and believes that multiple implementations strengthen the network, as in such a case only a subset of the network is affected instead of the whole network being stalled.</p>"},{"location":"FAQ/#how-does-a-libbitcoin-node-bootstrap-does-it-use-seed-nodes","title":"How does a libbitcoin node bootstrap, does it use seed nodes?","text":"<p>Currently libbitcoin uses the same seed nodes as Bitcoin Core.</p> <p>By default, a Libbitcoin node will connect to the default DNS names, which point to libbitcoin.net (which currently are offline).</p> <p>If specified, it will connect to the configured peers, which can be IP addresses or DNS names and port. The seed nodes and manual nodes can be specified in the config file and/or prepopulated in the address cache file with the same values. The node won't start unless it has 500 (connect batch size (5) * outbound connections (100)) unique addresses in the cache, either from seeding or otherwise. Seeding is bypassed if the address cache is sufficiently populated, and the seed nodes are dropped once seeding has completed.</p>"},{"location":"FAQ/#what-build-system-does-libbitcoin-use","title":"What build system does Libbitcoin use?","text":"<p>Libbitcoin supports multiple build systems:</p> <ul> <li>Autotools</li> <li>CMake (CMake Lists &amp; CMake presets)</li> <li>VSCode</li> <li>Visual C++ (MSVC) (Windows)</li> </ul> <p>GCC and Clang are officially supported and tested for these build systems.</p>"},{"location":"FAQ/#what-is-the-transaction-relay-policy-of-a-libbitcoin-node","title":"What is the transaction relay policy of a Libbitcoin node?","text":"<p>The Bitcoin P2P network does not implement consensus rules, therefore Libbitcoin only has minimum fee rules to protect against DoS attacks.</p> <p>Currently, a Libbitcoin node does not relay any transactions. Transaction relay is a WIP.</p>"},{"location":"FAQ/#how-does-libbitcoin-work-without-a-utxo-set","title":"How does Libbitcoin work without a UTXO set?","text":"<p>Libbitcoin stores the fully indexed chain.</p> <p>It is a common misconception that Bitcoin uses a UTXO set. Bitcoin uses blocks, a UTXO set is an (Bitcoin Core) implementation specific concept.</p>"},{"location":"FAQ/#can-libbitcoin-be-used-on-testnetregtest","title":"Can Libbitcoin be used on testnet/regtest?","text":"<p>Yes, Libbitcoin supports both testnet3 and regtest. Libbitcoin does currently not support testnet4 or signet.</p>"},{"location":"FAQ/#what-are-the-minimal-requirements-to-run-libbitcoin","title":"What are the minimal requirements to run Libbitcoin?","text":""},{"location":"FAQ/#operating-system","title":"Operating System","text":"<p>Libbitcoin is offically supported and tested on Ubuntu 24.04, latest macOS and latest Windows.</p>"},{"location":"FAQ/#dependencies","title":"Dependencies","text":"<ul> <li>Boost: 1.86.0</li> <li>secp256k1: v0.7.0</li> <li>ICU: 55.2 (optional dependency)</li> </ul>"},{"location":"FAQ/#hardware","title":"Hardware","text":"<p>It should run on as low as 8 GiB RAM, however Libbitcoin contributors do not spend time and resources on supporting lower level hardware as this hardware will become obsolete in the near future.</p> <p>32 GiB RAM minimum is recommended. 1 TB disk is required to store the chain.</p>"},{"location":"FAQ/#how-does-a-libbitcoin-node-manage-peers","title":"How does a Libbitcoin node manage peers?","text":"<p>By default, a Libbitcoin node targets to have 100 outbound connections, and has 0 inbound connections (disabled).</p> <p>New outbound connections are made in batches of 5 (default), where the first one to complete the handshake gets connected and the others get dropped.</p> <p>New connection establishments have a time limit of 5 seconds (default), peers that fail to establish a connection within this time are dropped.</p> <p>Stalled channels are dropped. A channel is considered stalled after 10 seconds (default) of inactivity.</p> <p>Slow channel(s) are also dropped. A channel is considered slow if the underperformance to the standard deviation is 1.5 (default) or more.</p> <p>Download rates are measured for each channel to perform standard deviation computation across all of them (can be disabled).</p> <p>Specified peers (in the config) will be reconnected on drop.</p> <p>Seed nodes are dropped after completion or time-out.</p> <p>A peer is immediately dropped if it violates the protocol or exceeds resource limits. Libbitcoin does not use a banning mechanism.</p>"},{"location":"FAQ/#what-are-the-executables","title":"What are the executables?","text":"<p>There are 3 executables:</p> <ul> <li><code>bs</code> is the Bitcoin-Server.</li> <li><code>bx</code> is the Bitcoin-Explorer.</li> <li><code>bn</code> is the Bitcoin-Node.</li> </ul> <p>Note that <code>bn</code> is part of Bitcoin-Server, and it's execution is for developer and/or testing purposes.</p>"},{"location":"FAQ/#how-does-libbitcoin-handle-softhard-forks","title":"How does Libbitcoin handle soft/hard forks?","text":"<p>Any fork, both soft and hard forks, are configuration options. Users are never forced to accept a fork when upgrading the software.</p>"},{"location":"FAQ/#does-libbitcoin-have-a-wallet","title":"Does Libbitcoin have a wallet?","text":"<p>Libbitcoin does not have a wallet.</p> <p>However, Libbitcoin System and Libbitcoin Explorer do have commands like the generation of private keys, addresses, mnemonics, bitcoin URI encoding etc.</p> <p>These functionalities in the <code>libbitcoin-system</code> library may be used by developers, whereas the commands in Libbitcoin Explorer can be used by end users.</p> <p>To use a Libbitcoin node with a wallet, an Electrum index can be used to connect a wallet.</p>"},{"location":"FAQ/#does-libbitcoin-have-a-rpc-interface","title":"Does Libbitcoin have a RPC interface?","text":"<p>No, Libbitcoin does not have a RPC interface.</p> <p>Libbitcoin Server contains a Client Server Interface, using ZeroMQ, that enables queries.</p>"},{"location":"FAQ/#how-can-i-donate-to-the-project","title":"How can I donate to the project?","text":"<p>Currently, the best way is to donate to individual contributors.</p> <p>Financial contributions are highly welcome and necessary for some of the contributors.</p>"},{"location":"FAQ/#what-database-does-libbitcoin-use","title":"What database does Libbitcoin use?","text":"<p>Libbitcoin uses a custom memory mapped (mmap) database.</p> <p>The store is fully write concurrent, asynchronous and lock free.</p> <p>It allows to use all the cores, meaning that the entire store can remain in memory if sufficient RAM is available.</p>"},{"location":"Introduction/","title":"Introduction","text":"<p>This documentation contains FAQ, <code>Guides</code>, and dedicated chapters for each Libbitcoin library. The FAQ should answer most questions, both introduction questions as well as more detailed information about how Libbitcoin works. The <code>Guides</code> section contains instructions on how to run a Libbitcoin node, use the configuration file, and use the Electrum index to connect to a wallet. The dedicated chapters for each library contain an introduction to what the library does and detailed build instructions.</p>"},{"location":"about/","title":"About","text":"<p>Libbitcoin is a cross platform, open source, C++ Bitcoin toolkit library.</p> <p>It is the second full node implementation, after Bitcoin Core. The project was started in 2011.</p> <p>The new version 4 is currently under active development and to be released in 2025.</p>"},{"location":"guides/ConfigurationOptions/","title":"Configuration Options","text":"<p>There is one configuration file for the Client stack and one configuration file for the Server stack.</p>"},{"location":"guides/ConfigurationOptions/#libbitcoin-server-node-configuration","title":"Libbitcoin Server (node) configuration","text":"<p>As the v4 Server is currently still a WIP and only the node can be run, the Node config file is used here.</p> <p>A Libbitcoin node has one configuration file, separated in 6 sections: bitcoin, database, forks, log, network, node. All config options have a comment with description and the default value.</p> <pre><code># Libbitcoin Node configuration file\n\n[bitcoin]\n# The activation time for bip16 in unix time, defaults to 1333238400.\nbip16_activation_time = &lt;value&gt;\n# The number of blocks considered for bip34 style soft fork activation, defaults to 1000.\nbip34_activation_sample = &lt;value&gt;\n# The number of new version blocks required for bip34 style soft fork activation, defaults to 750.\nbip34_activation_threshold = &lt;value&gt;\n# The number of new version blocks required for bip34 style soft fork enforcement, defaults to 950.\nbip34_enforcement_threshold = &lt;value&gt;\n# The block height to freeze the bip34 softfork for bip90, defaults to 227931.\nbip34_freeze = &lt;value&gt;\n# The block height to freeze the bip65 softfork for bip90, defaults to 388381.\nbip65_freeze = &lt;value&gt;\n# The block height to freeze the bip66 softfork for bip90, defaults to 363725.\nbip66_freeze = &lt;value&gt;\n# The hash:height checkpoint for bip9 bit0 activation, defaults to 000000000000000004a1b34462cb8aeebd5799177f7a29cf28f2d1961716b5b5:419328.\nbip9_bit0_active_checkpoint = &lt;value&gt;\n# The target block period, defaults to 600.\nblock_spacing_seconds = &lt;value&gt;\n# The blockchain checkpoints, defaults to the consensus set.\ncheckpoint = &lt;value&gt;\n# The genesis block, defaults to mainnet.\ngenesis_block = &lt;value&gt;\n# The initial block subsidy, defaults to 50.\ninitial_block_subsidy_bitcoin = &lt;value&gt;\n# A block presumed to be valid but not required to be present, defaults to 000000000000000000010538edbfd2d5b809a33dd83f284aeea41c6d0d96968a:900000.\nmilestone = &lt;value&gt;\n# The minimum work for any branch to be considered valid, defaults to 000000000000000000000000000000000000000052b2559353df4117b7348b64.\nminimum_work = &lt;value&gt;\n# The proof of work limit, defaults to 486604799.\nproof_of_work_limit = &lt;value&gt;\n# The difficulty retargeting factor, defaults to 4.\nretargeting_factor = &lt;value&gt;\n# The difficulty retargeting period, defaults to 1209600.\nretargeting_interval_seconds = &lt;value&gt;\n# The subsidy halving period, defaults to 210000.\nsubsidy_interval = &lt;value&gt;\n# The future timestamp allowance, defaults to 7200.\ntimestamp_limit_seconds = &lt;value&gt;\n\n[database]\n# The number of buckets in the address table head, defaults to '1' (0|1 disables).\naddress_buckets = &lt;value&gt;\n# The percentage expansion of the address table body, defaults to '5'.\naddress_rate = &lt;value&gt;\n# The minimum allocation of the address table body, defaults to '1'.\naddress_size = &lt;value&gt;\n# The percentage expansion of the candidate table body, defaults to '5'.\ncandidate_rate = &lt;value&gt;\n# The minimum allocation of the candidate table body, defaults to '2575500'.\ncandidate_size = &lt;value&gt;\n# The percentage expansion of the candidate table body, defaults to '5'.\nconfirmed_rate = &lt;value&gt;\n# The minimum allocation of the candidate table body, defaults to '2575500'.\nconfirmed_size = &lt;value&gt;\n# The minimum number of buckets in the duplicate table head, defaults to '1024'.\nduplicate_buckets = &lt;value&gt;\n# The percentage expansion of the duplicate table, defaults to '5'.\nduplicate_rate = &lt;value&gt;\n# The minimum allocation of the duplicate table body, defaults to '44'.\nduplicate_size = &lt;value&gt;\n# The number of buckets in the filter_bk table head, defaults to '0' (0 disables).\nfilter_bk_buckets = &lt;value&gt;\n# The percentage expansion of the filter_bk table body, defaults to '5'.\nfilter_bk_rate = &lt;value&gt;\n# The minimum allocation of the filter_bk table body, defaults to '1'.\nfilter_bk_size = &lt;value&gt;\n# The number of buckets in the filter_tx table head, defaults to '0' (0 disables).\nfilter_tx_buckets = &lt;value&gt;\n# The percentage expansion of the filter_tx table body, defaults to '5'.\nfilter_tx_rate = &lt;value&gt;\n# The minimum allocation of the filter_tx table body, defaults to '1'.\nfilter_tx_size = &lt;value&gt;\n# The number of buckets in the header table head, defaults to '386364'.\nheader_buckets = &lt;value&gt;\n# The percentage expansion of the header table body, defaults to '5'.\nheader_rate = &lt;value&gt;\n# The minimum allocation of the header table body, defaults to '21000000'.\nheader_size = &lt;value&gt;\n# The percentage expansion of the input table body, defaults to '5'.\ninput_rate = &lt;value&gt;\n# The minimum allocation of the input table body, defaults to '92500000000'.\ninput_size = &lt;value&gt;\n# The percentage expansion of the ins table body, defaults to '5'.\nins_rate = &lt;value&gt;\n# The minimum allocation of the point table body, defaults to '8550000000'.\nins_size = &lt;value&gt;\n# The percentage expansion of the output table body, defaults to '5'.\noutput_rate = &lt;value&gt;\n# The minimum allocation of the output table body, defaults to '25300000000'.\noutput_size = &lt;value&gt;\n# The percentage expansion of the puts table body, defaults to '5'.\nouts_rate = &lt;value&gt;\n# The minimum allocation of the puts table body, defaults to '3700000000'.\nouts_size = &lt;value&gt;\n# The blockchain database directory, defaults to 'blockchain'.\npath = &lt;value&gt;\n# The number of buckets in the spend table head, defaults to '1365977136'.\npoint_buckets = &lt;value&gt;\n# The percentage expansion of the point table body, defaults to '5'.\npoint_rate = &lt;value&gt;\n# The minimum allocation of the point table body, defaults to '25700000000'.\npoint_size = &lt;value&gt;\n# The minimum number of buckets in the prevout table head, defaults to '0'.\nprevout_buckets = &lt;value&gt;\n# The percentage expansion of the prevout table, defaults to '5'.\nprevout_rate = &lt;value&gt;\n# The minimum allocation of the prevout table body, defaults to '1'.\nprevout_size = &lt;value&gt;\n# The number of buckets in the strong_tx table head, defaults to '469222525'.\nstrong_tx_buckets = &lt;value&gt;\n# The percentage expansion of the strong_tx table body, defaults to '5'.\nstrong_tx_rate = &lt;value&gt;\n# The minimum allocation of the strong_tx table body, defaults to '2900000000'.\nstrong_tx_size = &lt;value&gt;\n# The number of buckets in the tx table head, defaults to '469222525'.\ntx_buckets = &lt;value&gt;\n# The percentage expansion of the tx table body, defaults to '5'.\ntx_rate = &lt;value&gt;\n# The minimum allocation of the tx table body, defaults to '17000000000'.\ntx_size = &lt;value&gt;\n# The number of buckets in the txs table head, defaults to '900001'.\ntxs_buckets = &lt;value&gt;\n# The percentage expansion of the txs table body, defaults to '5'.\ntxs_rate = &lt;value&gt;\n# The minimum allocation of the txs table body, defaults to '1050000000'.\ntxs_size = &lt;value&gt;\n# The number of buckets in the validated_bk table head, defaults to '900001'.\nvalidated_bk_buckets = &lt;value&gt;\n# The percentage expansion of the validated_bk table body, defaults to '5'.\nvalidated_bk_rate = &lt;value&gt;\n# The minimum allocation of the validated_bk table body, defaults to '1700000'.\nvalidated_bk_size = &lt;value&gt;\n# The number of buckets in the validated_tx table head, defaults to '1'.\nvalidated_tx_buckets = &lt;value&gt;\n# The percentage expansion of the validated_tx table body, defaults to '5'.\nvalidated_tx_rate = &lt;value&gt;\n# The minimum allocation of the validated_tx table body, defaults to '1'.\nvalidated_tx_size = &lt;value&gt;\n\n[forks]\n# Add check-sequence-verify op code, defaults to true (soft fork).\nbip112 = &lt;value&gt;\n# Use median time past for locktime, defaults to true (soft fork).\nbip113 = &lt;value&gt;\n# Segregated witness consensus layer, defaults to true (soft fork).\nbip141 = &lt;value&gt;\n# Witness version 0 (segwit), defaults to true (soft fork).\nbip143 = &lt;value&gt;\n# Prevent dummy value malleability, defaults to true (soft fork).\nbip147 = &lt;value&gt;\n# Add pay-to-script-hash processing, defaults to true (soft fork).\nbip16 = &lt;value&gt;\n# Disallow collision of unspent transaction hashes, defaults to true (soft fork).\nbip30 = &lt;value&gt;\n# Require coinbase input includes block height, defaults to true (soft fork).\nbip34 = &lt;value&gt;\n# Witness version 1 (taproot), defaults to true (soft fork).\nbip341 = &lt;value&gt;\n# Validation of taproot script, defaults to true (soft fork).\nbip342 = &lt;value&gt;\n# Finite monetary supply, defaults to true (soft fork).\nbip42 = &lt;value&gt;\n# Add check-locktime-verify op code, defaults to true (soft fork).\nbip65 = &lt;value&gt;\n# Require strict signature encoding, defaults to true (soft fork).\nbip66 = &lt;value&gt;\n# Add relative locktime enforcement, defaults to true (soft fork).\nbip68 = &lt;value&gt;\n# Assume bip34, bip65, and bip66 activation if enabled, defaults to true (hard fork).\nbip90 = &lt;value&gt;\n# Require difficult blocks, defaults to true (use false for testnet).\ndifficult = &lt;value&gt;\n# Retarget difficulty, defaults to true.\nretarget = &lt;value&gt;\n# Fix target overflow for very low difficulty, defaults to false (hard fork).\nretarget_overflow_patch = &lt;value&gt;\n# Use scrypt hashing for proof of work, defaults to false (hard fork).\nscrypt_proof_of_work = &lt;value&gt;\n# Fix time warp bug, defaults to false (hard fork).\ntime_warp_patch = &lt;value&gt;\n\n[log]\n# Enable application logging, defaults to true.\napplication = &lt;value&gt;\n# Enable local fault logging, defaults to true.\nfault = &lt;value&gt;\n# The maximum byte size of each pair of rotated log files, defaults to 1000000.\nmaximum_size = &lt;value&gt;\n# Enable news logging, defaults to true.\nnews = &lt;value&gt;\n# The log files directory, defaults to empty.\npath = &lt;value&gt;\n# Enable protocol logging, defaults to false.\nprotocol = &lt;value&gt;\n# Enable proxy logging, defaults to false.\nproxy = &lt;value&gt;\n# Enable quitting logging, defaults to false.\nquitting = &lt;value&gt;\n# Enable remote fault logging, defaults to true.\nremote = &lt;value&gt;\n# Enable session logging, defaults to true.\nsession = &lt;value&gt;\n# Path to windows debug build symbols file (.pdb).\nsymbols = &lt;value&gt;\n# Enable verbose logging, defaults to false.\nverbose = &lt;value&gt;\n\n[network]\n# The lower bound for address selection divisor, defaults to 5.\naddress_lower = &lt;value&gt;\n# The upper bound for address selection divisor, defaults to 10.\naddress_upper = &lt;value&gt;\n# IP address to bind, multiple entries allowed, defaults to 0.0.0.0:8333.\nbind = &lt;value&gt;\n# IP address to disallow as a peer, multiple entries allowed.\nblacklist = &lt;value&gt;\n# The age limit for any connection, defaults to 1440.\nchannel_expiration_minutes = &lt;value&gt;\n# The time between ping messages, defaults to 5.\nchannel_heartbeat_minutes = &lt;value&gt;\n# The inactivity time limit for any connection, defaults to 10.\nchannel_inactivity_minutes = &lt;value&gt;\n# The number of concurrent attempts to establish one connection, defaults to 5.\nconnect_batch_size = &lt;value&gt;\n# The time limit for connection establishment, defaults to 5.\nconnect_timeout_seconds = &lt;value&gt;\n# Enable address messages, defaults to true.\nenable_address = &lt;value&gt;\n# Enable address v2 messages, defaults to false.\nenable_address_v2 = &lt;value&gt;\n# Enable alert messages, defaults to false.\nenable_alert = &lt;value&gt;\n# Enable enable compact block messages, defaults to false.\nenable_compact = &lt;value&gt;\n# Enable internet protocol version 6 (IPv6), defaults to false.\nenable_ipv6 = &lt;value&gt;\n# Allow connections from the node to itself, defaults to false.\nenable_loopback = &lt;value&gt;\n# Enable reject messages, defaults to false.\nenable_reject = &lt;value&gt;\n# Enable transaction relay, defaults to true.\nenable_relay = &lt;value&gt;\n# Enable witness transaction identifier relay, defaults to false.\nenable_witness_tx = &lt;value&gt;\n# The time limit to complete the connection handshake, defaults to 30.\nhandshake_timeout_seconds = &lt;value&gt;\n# The maximum number of peer hosts in the pool, defaults to 10000.\nhost_pool_capacity = &lt;value&gt;\n# The magic number for message headers, defaults to 3652501241.\nidentifier = &lt;value&gt;\n# The target number of incoming network connections, defaults to 100.\ninbound_connections = &lt;value&gt;\n# The advertised services that cause a peer to be dropped, defaults to 176.\ninvalid_services = &lt;value&gt;\n# The maximum allowable channel clock skew, defaults to 120.\nmaximum_skew_minutes = &lt;value&gt;\n# The minimum retained read buffer size, defaults to 4000000.\nminimum_buffer = &lt;value&gt;\n# The target number of outgoing network connections, defaults to 100.\noutbound_connections = &lt;value&gt;\n# The peer address cache file directory, defaults to empty.\npath = &lt;value&gt;\n# A persistent peer node, multiple entries allowed.\npeer = &lt;value&gt;\n# The maximum network protocol version, defaults to 70012.\nprotocol_maximum = &lt;value&gt;\n# The minimum network protocol version, defaults to 31800.\nprotocol_minimum = &lt;value&gt;\n# The peer download rate limit in bytes per second, defaults to 1024 (not implemented).\nrate_limit = &lt;value&gt;\n# The time delay for failed connection retry, defaults to 1.\nretry_timeout_seconds = &lt;value&gt;\n# A seed node for initializing the host pool, multiple entries allowed.\nseed = &lt;value&gt;\n# The time limit for obtaining seed addresses, defaults to 30.\nseeding_timeout_seconds = &lt;value&gt;\n# IP address to advertise, multiple entries allowed.\nself = &lt;value&gt;\n# The maximum services exposed by network connections, defaults to 9 (full node, witness).\nservices_maximum = &lt;value&gt;\n# The minimum services exposed by network connections, defaults to 9 (full node, witness).\nservices_minimum = &lt;value&gt;\n# The minimum number of threads in the network threadpool, defaults to 16.\nthreads = &lt;value&gt;\n# The node user agent string, defaults to '/libbitcoin:4.0.0/'.\nuser_agent = &lt;value&gt;\n# Validate the checksum of network messages, defaults to false.\nvalidate_checksum = &lt;value&gt;\n# IP address to allow as a peer, multiple entries allowed.\nwhitelist = &lt;value&gt;\n\n[node]\n# Block deserialization buffer multiple of wire size, defaults to 20 (0 disables).\nallocation_multiple = &lt;value&gt;\n# Allowable underperformance standard deviation, defaults to 1.5 (0 disables).\nallowed_deviation = &lt;value&gt;\n# Limit of per channel cached peer block and tx announcements, to avoid replaying (defaults to 42).\nannouncement_cache = &lt;value&gt;\n# Time from present that blocks are considered current, defaults to 60 (0 disables).\ncurrency_window_minutes = &lt;value&gt;\n# Delay accepting inbound connections until node is current, defaults to true.\ndelay_inbound = &lt;value&gt;\n# Maximum number of blocks to download concurrently, defaults to '50000' (0 disables).\nmaximum_concurrency = &lt;value&gt;\n# Maximum block height to populate, defaults to 0 (unlimited).\nmaximum_height = &lt;value&gt;\n# Set the validation threadpool to high priority, defaults to true.\npriority = &lt;value&gt;\n# Sampling period for drop of stalled channels, defaults to 10 (0 disables).\nsample_period_seconds = &lt;value&gt;\n# The number of threads in the validation threadpool, defaults to 32.\nthreads = &lt;value&gt;\n\n[server]\n# IP address to bind, multiple entries allowed, defaults to 0.0.0.0:8080.\nbind = &lt;value&gt;\n# The target number of incoming network connections, defaults to 0.\ninbound_connections = &lt;value&gt;\n</code></pre>"},{"location":"guides/Electrum/","title":"Electrum","text":"<p>Libbitcoin can build an Electrum index. So it is possible to connect to and use (wallet) software that supports an Electrum index.</p> <p>However, there is currently no way to connect to external apllications, like Electrum.</p> <p>This guide will be updated once it is possible.</p>"},{"location":"guides/RunningLibbitcoin/Linux/BuildFromSource/","title":"Build Libbitcoin Node from source","text":"<p>Instructions how to run a Libbitcoin node</p> <p>Warning</p> <p>Running a Libbitcoin node by using <code>bn</code> should only be used by developers/for testing purposes. A Libbitcoin Server should be run for production, it contains the Bitcoin node and address indexing and a client-server interface._</p> <p>This guide is for people who want to test Libbitcoin v4</p>"},{"location":"guides/RunningLibbitcoin/Linux/BuildFromSource/#debianubuntu","title":"Debian/Ubuntu","text":""},{"location":"guides/RunningLibbitcoin/Linux/BuildFromSource/#using-installsh","title":"Using install.sh","text":"<p>The easiest way to run a libbitcoin node is by cloning the libbitcoin-node repository and then run the install script.</p> <p>Clone the libbitcoin-node repository and get the build requirements:</p> <p><code>sudo apt-get install git build-essential autoconf automake libtool pkg-config</code></p> <p><code>wget</code> is needed for the install script to download the required dependencies.</p> <p>In the libbitcoin-node root directory, execute the install script:</p> <p><code>./install.sh --build-dir=/home/user/libbitcoin-node/ --enable-isystem --prefix=/home/user/libbitcoin-node/prefix --disable-static --disable-ndebug  --build-boost  --build-secp256k1</code></p> <p>It will show the libbitcoin-node installer configuration and download and install the dependencies in the specified <code>--build-dir</code>. The <code>--prefix</code> is where the bin, etc, include and lib and share directories will be located.</p> <p>bin contains the <code>bn</code> executable, etc contains the bn.cfg file, which is an example config file (changing values here will not take effect).</p> <p>Now run the <code>bn</code> executable and the node will start and create outbound connections.</p>"},{"location":"guides/RunningLibbitcoin/Linux/Download%26Install/","title":"Download &amp; Install","text":"<p>A binary to download will be available once Libbitcoin v4 is released.</p> <p>To run Libbitcoin v4 for testing purposes, the latest master branch should be build from source.</p>"},{"location":"guides/RunningLibbitcoin/Linux/RunNode/","title":"Run Libbitcoin Node","text":""},{"location":"guides/RunningLibbitcoin/Windows/BuildFromSource/","title":"Build Libbitcoin Node from source","text":"<p>Instructions how to run a Libbitcoin node</p> <p>Warning</p> <p>Running a Libbitcoin node by using <code>bn.exe</code> should only be used by developers/for testing purposes. A Libbitcoin Server should be run for production, it contains the Bitcoin node and address indexing and a client-server interface._</p> <p>This guide is for people who want to test Libbitcoin v4</p>"},{"location":"guides/RunningLibbitcoin/Windows/BuildFromSource/#windows","title":"Windows","text":""},{"location":"guides/RunningLibbitcoin/Windows/BuildFromSource/#using-msbuild","title":"Using MSBuild","text":"<p>The easiest way to run a libbitcoin node is by cloning the libbitcoin-node repository and then run the install script.</p> <p>Clone the libbitcoin-node repository:</p> <p><code>git clone https://github.com/libbitcoin/libbitcoin-node.git</code></p> <p>In the libbitcoin-node root directory, execute the build script:</p> <p><code>.\\build.cmd .. x64 StaticRelease x64 vs2022</code></p> <p>It will show the libbitcoin-node installer configuration and download and install the dependencies.</p> <p>The resulting <code>bn.exe</code> executable can be found at: <code>C:\\Users\\UserName\\libbitcoin-node/builds/msvc/vs2022/libbitcoin-node/x64/Release/bn.exe</code></p> <p>Now run the <code>bn.exe</code> and the node will start and create outbound connections.</p>"},{"location":"guides/RunningLibbitcoin/Windows/Download%26Install/","title":"Download &amp; Install","text":"<p>A binary to download will be available once Libbitcoin v4 is released.</p> <p>To run Libbitcoin v4 for testing purposes, the latest master branch should be build from source.</p>"},{"location":"guides/RunningLibbitcoin/Windows/RunNode/","title":"Run Libbitcoin Node","text":""},{"location":"guides/RunningLibbitcoin/macOS/BuildFromSource/","title":"Build Libbitcoin Node from source","text":"<p>Instructions how to run a Libbitcoin node</p> <p>Warning</p> <p>Running a Libbitcoin node by using <code>bn</code> should only be used by developers/for testing purposes. A Libbitcoin Server should be run for production, it contains the Bitcoin node and address indexing and a client-server interface._</p> <p>This guide is for people who want to test Libbitcoin v4</p>"},{"location":"guides/RunningLibbitcoin/macOS/BuildFromSource/#macos","title":"macOS","text":""},{"location":"guides/RunningLibbitcoin/macOS/BuildFromSource/#using-installsh","title":"Using install.sh","text":"<p>The easiest way to run a libbitcoin node is by cloning the libbitcoin-node repository and then run the install script.</p> <p>Clone the libbitcoin-node repository:</p> <p><code>git clone https://github.com/libbitcoin/libbitcoin-node.git</code></p> <p>Get the build requirements:</p> <p><code>brew install autoconf automake libtool icu4c</code></p> <p>In the libbitcoin-node root directory, execute the install script:</p> <p><code>./install.sh --build-dir=/Users/runner/work/libbitcoin-node/ --enable-isystem --prefix=/Users/runner/work/libbitcoin-node/prefix --disable-static --enable-ndebug  --build-boost  --build-secp256k1</code></p> <p>It will show the libbitcoin-node installer configuration and download and install the dependencies in the specified <code>--build-dir</code>. The <code>--prefix</code> is where the bin, etc, include and lib and share directories will be located.</p> <p>bin contains the <code>bn</code> executable, etc contains the bn.cfg file, which is an example config file (changing values here will not take effect).</p> <p>Now run the <code>bn</code> executable and the node will start and create outbound connections.</p>"},{"location":"guides/RunningLibbitcoin/macOS/Download%26Install/","title":"Download &amp; Install","text":"<p>A binary to download will be available once Libbitcoin v4 is released.</p> <p>To run Libbitcoin v4 for testing purposes, the latest master branch should be build from source.</p>"},{"location":"guides/RunningLibbitcoin/macOS/RunNode/","title":"Run Libbitcoin Node","text":""},{"location":"libbitcoin-build/intro/","title":"Libbitcoin Build","text":"<p>The libbitcoin-build library contains the build system for Libbitcoin. It is used by all other libraries.</p>"},{"location":"libbitcoin-client/intro/","title":"Libbitcoin Client","text":"<p>The libbitcoin-client library is used to communicate with the libbitcoin server.</p>"},{"location":"libbitcoin-database/intro/","title":"Libbitcoin Database","text":"<p>The libbitcoin-database library contains a high performance blockchain database.</p>"},{"location":"libbitcoin-explorer/commands/","title":"Commands","text":"<p>Libbitcoin-explorer has 117 commands:</p>"},{"location":"libbitcoin-explorer/commands/#address-decode","title":"address-decode","text":""},{"location":"libbitcoin-explorer/commands/#address-embed","title":"address-embed","text":""},{"location":"libbitcoin-explorer/commands/#address-encode","title":"address-encode","text":""},{"location":"libbitcoin-explorer/commands/#address-to-key","title":"address-to-key","text":""},{"location":"libbitcoin-explorer/commands/#base16-decode","title":"base16-decode","text":""},{"location":"libbitcoin-explorer/commands/#base16-encode","title":"base16-encode","text":""},{"location":"libbitcoin-explorer/commands/#base32-decode","title":"base32-decode","text":""},{"location":"libbitcoin-explorer/commands/#base32-encode","title":"base32-encode","text":""},{"location":"libbitcoin-explorer/commands/#base58check-decode","title":"base58check-decode","text":""},{"location":"libbitcoin-explorer/commands/#base58check-encode","title":"base58check-encode","text":""},{"location":"libbitcoin-explorer/commands/#base-decode","title":"base-decode","text":""},{"location":"libbitcoin-explorer/commands/#base58-encode","title":"base58-encode","text":""},{"location":"libbitcoin-explorer/commands/#base64-decode","title":"base64-decode","text":""},{"location":"libbitcoin-explorer/commands/#base64-encode","title":"base64-encode","text":""},{"location":"libbitcoin-explorer/commands/#bech32-decode","title":"bech32-decode","text":""},{"location":"libbitcoin-explorer/commands/#bech32-encode","title":"bech32-encode","text":""},{"location":"libbitcoin-explorer/commands/#bitcoin160","title":"bitcoin160","text":""},{"location":"libbitcoin-explorer/commands/#bitcoin256","title":"bitcoin256","text":""},{"location":"libbitcoin-explorer/commands/#broadcast-tx","title":"broadcast-tx","text":""},{"location":"libbitcoin-explorer/commands/#btc-to-satoshi","title":"btc-to-satoshi","text":""},{"location":"libbitcoin-explorer/commands/#cert-new","title":"cert-new","text":""},{"location":"libbitcoin-explorer/commands/#cert-public","title":"cert-public","text":""},{"location":"libbitcoin-explorer/commands/#checked-decode","title":"checked-decode","text":""},{"location":"libbitcoin-explorer/commands/#checked-encode","title":"checked-encode","text":""},{"location":"libbitcoin-explorer/commands/#ec-add","title":"ec-add","text":""},{"location":"libbitcoin-explorer/commands/#ec-add-secrets","title":"ec-add-secrets","text":""},{"location":"libbitcoin-explorer/commands/#ec-decompress","title":"ec-decompress","text":""},{"location":"libbitcoin-explorer/commands/#ec-multiply","title":"ec-multiply","text":""},{"location":"libbitcoin-explorer/commands/#ec-multiply-secrets","title":"ec-multiply-secrets","text":""},{"location":"libbitcoin-explorer/commands/#ec-new","title":"ec-new","text":""},{"location":"libbitcoin-explorer/commands/#ec-to-address","title":"ec-to-address","text":""},{"location":"libbitcoin-explorer/commands/#ec-to-ek","title":"ec-to-ek","text":""},{"location":"libbitcoin-explorer/commands/#ec-to-public","title":"ec-to-public","text":""},{"location":"libbitcoin-explorer/commands/#ec-to-wif","title":"ec-to-wif","text":""},{"location":"libbitcoin-explorer/commands/#ec-to-witness","title":"ec-to-witness","text":""},{"location":"libbitcoin-explorer/commands/#ek-address","title":"ek-address","text":""},{"location":"libbitcoin-explorer/commands/#ek-new","title":"ek-new","text":""},{"location":"libbitcoin-explorer/commands/#ek-public","title":"ek-public","text":""},{"location":"libbitcoin-explorer/commands/#ek-public-to-address","title":"ek-public-to-address","text":""},{"location":"libbitcoin-explorer/commands/#ek-public-to-ec","title":"ek-public-to-ec","text":""},{"location":"libbitcoin-explorer/commands/#ek-to-address","title":"ek-to-address","text":""},{"location":"libbitcoin-explorer/commands/#ek-to-ec","title":"ek-to-ec","text":""},{"location":"libbitcoin-explorer/commands/#electrum-decode","title":"electrum-decode","text":""},{"location":"libbitcoin-explorer/commands/#electrum-new","title":"electrum-new","text":""},{"location":"libbitcoin-explorer/commands/#electrum-to-seed","title":"electrum-to-seed","text":""},{"location":"libbitcoin-explorer/commands/#fetch-balance","title":"fetch-balance","text":""},{"location":"libbitcoin-explorer/commands/#fetch-block","title":"fetch-block","text":""},{"location":"libbitcoin-explorer/commands/#fetch-block-hashes","title":"fetch-block-hashes","text":""},{"location":"libbitcoin-explorer/commands/#fetch-block-height","title":"fetch-block-height","text":""},{"location":"libbitcoin-explorer/commands/#fetch-filter-checkpoint","title":"fetch-filter-checkpoint","text":""},{"location":"libbitcoin-explorer/commands/#fetch-filter","title":"fetch-filter","text":""},{"location":"libbitcoin-explorer/commands/#fetch-filter-headers","title":"fetch-filter-headers","text":""},{"location":"libbitcoin-explorer/commands/#fetch-header","title":"fetch-header","text":""},{"location":"libbitcoin-explorer/commands/#fetch-height","title":"fetch-height","text":""},{"location":"libbitcoin-explorer/commands/#fetch-history","title":"fetch-history","text":""},{"location":"libbitcoin-explorer/commands/#fetch-public-key","title":"fetch-public-key","text":""},{"location":"libbitcoin-explorer/commands/#fetch-tx","title":"fetch-tx","text":""},{"location":"libbitcoin-explorer/commands/#fetch-tx-index","title":"fetch-tx-index","text":""},{"location":"libbitcoin-explorer/commands/#fetch-utxo","title":"fetch-utxo","text":""},{"location":"libbitcoin-explorer/commands/#get-filter-checkpoint","title":"get-filter-checkpoint","text":""},{"location":"libbitcoin-explorer/commands/#get-filter-headers","title":"get-filter-headers","text":""},{"location":"libbitcoin-explorer/commands/#get-filters","title":"get-filters","text":""},{"location":"libbitcoin-explorer/commands/#hd-new","title":"hd-new","text":""},{"location":"libbitcoin-explorer/commands/#hd-private","title":"hd-private","text":""},{"location":"libbitcoin-explorer/commands/#hd-public","title":"hd-public","text":""},{"location":"libbitcoin-explorer/commands/#hd-to-address","title":"hd-to-address","text":""},{"location":"libbitcoin-explorer/commands/#hd-to-ec","title":"hd-to-ec","text":""},{"location":"libbitcoin-explorer/commands/#hd-to-public","title":"hd-to-public","text":""},{"location":"libbitcoin-explorer/commands/#hd-to-wif","title":"hd-to-wif","text":""},{"location":"libbitcoin-explorer/commands/#help","title":"help","text":""},{"location":"libbitcoin-explorer/commands/#input-set","title":"input-set","text":""},{"location":"libbitcoin-explorer/commands/#input-sign","title":"input-sign","text":""},{"location":"libbitcoin-explorer/commands/#input-validate","title":"input-validate","text":""},{"location":"libbitcoin-explorer/commands/#match-neutrino-address","title":"match-neutrino-address","text":""},{"location":"libbitcoin-explorer/commands/#match-neutrino-script","title":"match-neutrino-script","text":""},{"location":"libbitcoin-explorer/commands/#message-sign","title":"message-sign","text":""},{"location":"libbitcoin-explorer/commands/#message-validate","title":"message-validate","text":""},{"location":"libbitcoin-explorer/commands/#mnemonic-decode","title":"mnemonic-decode","text":""},{"location":"libbitcoin-explorer/commands/#mnemonic-encode","title":"mnemonic-encode","text":""},{"location":"libbitcoin-explorer/commands/#mnemonic-to-seed","title":"mnemonic-to-seed","text":""},{"location":"libbitcoin-explorer/commands/#put-tx","title":"put-tx","text":""},{"location":"libbitcoin-explorer/commands/#qrcode","title":"qrcode","text":""},{"location":"libbitcoin-explorer/commands/#ripemd160","title":"ripemd160","text":""},{"location":"libbitcoin-explorer/commands/#satoshi-to-btc","title":"satoshi-to-btc","text":""},{"location":"libbitcoin-explorer/commands/#script-decode","title":"script-decode","text":""},{"location":"libbitcoin-explorer/commands/#script-encode","title":"script-encode","text":""},{"location":"libbitcoin-explorer/commands/#script-to-address","title":"script-to-address","text":""},{"location":"libbitcoin-explorer/commands/#script-to-key","title":"script-to-key","text":""},{"location":"libbitcoin-explorer/commands/#script-to-witness","title":"script-to-witness","text":""},{"location":"libbitcoin-explorer/commands/#seed","title":"seed","text":""},{"location":"libbitcoin-explorer/commands/#send-tx","title":"send-tx","text":""},{"location":"libbitcoin-explorer/commands/#settings","title":"settings","text":""},{"location":"libbitcoin-explorer/commands/#sha160","title":"sha160","text":""},{"location":"libbitcoin-explorer/commands/#sha256","title":"sha256","text":""},{"location":"libbitcoin-explorer/commands/#sha512","title":"sha512","text":""},{"location":"libbitcoin-explorer/commands/#stealth-decode","title":"stealth-decode","text":""},{"location":"libbitcoin-explorer/commands/#stealth-encode","title":"stealth-encode","text":""},{"location":"libbitcoin-explorer/commands/#stealth-public","title":"stealth-public","text":""},{"location":"libbitcoin-explorer/commands/#stealth-secret","title":"stealth-secret","text":""},{"location":"libbitcoin-explorer/commands/#stealth-shared","title":"stealth-shared","text":""},{"location":"libbitcoin-explorer/commands/#subscribe-block","title":"subscribe-block","text":""},{"location":"libbitcoin-explorer/commands/#subscribe-tx","title":"subscribe-tx","text":""},{"location":"libbitcoin-explorer/commands/#token-new","title":"token-new","text":""},{"location":"libbitcoin-explorer/commands/#tx-decode","title":"tx-decode","text":""},{"location":"libbitcoin-explorer/commands/#tx-encode","title":"tx-encode","text":""},{"location":"libbitcoin-explorer/commands/#tx-sign","title":"tx-sign","text":""},{"location":"libbitcoin-explorer/commands/#uri-decode","title":"uri-decode","text":""},{"location":"libbitcoin-explorer/commands/#uri-encode","title":"uri-encode","text":""},{"location":"libbitcoin-explorer/commands/#validate-tx","title":"validate-tx","text":""},{"location":"libbitcoin-explorer/commands/#version","title":"version","text":""},{"location":"libbitcoin-explorer/commands/#watch-key","title":"watch-key","text":""},{"location":"libbitcoin-explorer/commands/#watch-tx","title":"watch-tx","text":""},{"location":"libbitcoin-explorer/commands/#wif-to-ec","title":"wif-to-ec","text":""},{"location":"libbitcoin-explorer/commands/#wif-to-public","title":"wif-to-public","text":""},{"location":"libbitcoin-explorer/commands/#witness-to-key","title":"witness-to-key","text":""},{"location":"libbitcoin-explorer/commands/#wrap-decode","title":"wrap-decode","text":""},{"location":"libbitcoin-explorer/commands/#wrap-encode","title":"wrap-encode","text":""},{"location":"libbitcoin-explorer/intro/","title":"Libbitcoin Explorer","text":"<p>The libbitcoin-explorer library provides a command line tool to interact with a Libbitcoin Server, as well as a variety of P2P queries that can be executed against any Bitcoin node.</p>"},{"location":"libbitcoin-network/intro/","title":"Libbitcoin Network","text":"<p>The libbitcoin-network library contains the P2P networking stack.</p>"},{"location":"libbitcoin-network/Build/Linux/Autotools/","title":"Linux Autotools Build","text":"<p>The libbitcoin-network library can be build either dynamic or static.</p> <p>GCC and Clang are officially supported. The following steps assume you have either of these installed.</p> <p>To build, follow these steps:</p>"},{"location":"libbitcoin-network/Build/Linux/Autotools/#install-the-required-dependencies","title":"Install the required dependencies","text":"<pre><code>sudo apt-get install git build-essential autoconf automake libtool pkg-config\n</code></pre> <p>{CPU flag could be determined in order to enable hash function optimizations, more information about this will be added to the docs later}</p>"},{"location":"libbitcoin-network/Build/Linux/Autotools/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/libbitcoin/libbitcoin-network.git\n</code></pre>"},{"location":"libbitcoin-network/Build/Linux/Autotools/#execute-the-install-script","title":"Execute the install script","text":"<p>Navigate to the cloned repository and then execute the install script.</p> <p><code>./install.sh --help</code> will display all the options.</p> <p>It can be either a <code>dynamic</code> build or a <code>static</code> build:</p> <p>Change the <code>build-dir</code> and <code>prefix</code> location if desired and use the desired parameters.</p>"},{"location":"libbitcoin-network/Build/Linux/Autotools/#dynamic","title":"Dynamic","text":"<p>Build with the default options and dynamic linking:</p> <pre><code>./install.sh --build-dir=/home/user/libbitcoin-network/ --enable-isystem --prefix=/home/user/libbitcoin-network/prefix --disable-static --disable-ndebug  --build-boost  --build-secp256k1\n</code></pre>"},{"location":"libbitcoin-network/Build/Linux/Autotools/#static","title":"Static","text":"<p>Build with static linking and ICU support:</p> <pre><code>./install.sh --build-dir=/home/user/libbitcoin-network/ --enable-isystem --prefix=/home/user/libbitcoin-network/prefix --disable-shared --enable-ndebug  --build-boost --build-icu --with-icu --build-secp256k1\n</code></pre> <p>The library, and dependent libraries will now be build in the specified directory.</p>"},{"location":"libbitcoin-network/Build/Linux/CMakeList/","title":"Linux CMake List Build","text":"<p>The libbitcoin-network library can be build either dynamic or static.</p> <p>GCC and Clang are officially supported. The following steps assume you have either of these installed.</p> <p>To build, follow these steps:</p>"},{"location":"libbitcoin-network/Build/Linux/CMakeList/#install-the-required-dependencies","title":"Install the required dependencies","text":"<pre><code>sudo apt-get install git build-essential autoconf automake libtool pkg-config\n</code></pre> <p>{CPU flag could be determined in order to enable hash function optimizations, more information about this will be added to the docs later}</p>"},{"location":"libbitcoin-network/Build/Linux/CMakeList/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/libbitcoin/libbitcoin-network.git\n</code></pre>"},{"location":"libbitcoin-network/Build/Linux/CMakeList/#execute-the-install-script","title":"Execute the install script","text":"<p>Navigate to the cloned repository and then execute the install script.</p> <p><code>./install-cmake.sh --help</code> will display all the options.</p> <p>It can be either a <code>dynamic</code> build or a <code>static</code> build:</p> <p>Change the <code>build-dir</code> and <code>prefix</code> location if desired and use the desired parameters.</p>"},{"location":"libbitcoin-network/Build/Linux/CMakeList/#dynamic","title":"Dynamic","text":"<p>Build with the default options and dynamic linking:</p> <pre><code>./install-cmake.sh --build-dir=/home/user/libbitcoin-network/  --prefix=/home/user/libbitcoin-network/prefix --disable-static --disable-ndebug -Denable-ndebug=no  --build-boost  --build-secp256k1\n</code></pre>"},{"location":"libbitcoin-network/Build/Linux/CMakeList/#static","title":"Static","text":"<p>Build with static linking and ICU support:</p> <pre><code>./install-cmake.sh --build-dir=/home/user/libbitcoin-network/  --prefix=/home/user/libbitcoin-network/prefix --disable-shared --enable-ndebug -Denable-ndebug=yes  --build-boost --build-icu --with-icu --build-secp256k1\n</code></pre> <p>The library, and dependent libraries will now be build in the specified directory.</p>"},{"location":"libbitcoin-network/Build/Linux/CMakePreset/","title":"Linux CMake Preset Build","text":"<p>The libbitcoin-network library can be build either dynamic or static.</p> <p>GCC and Clang are officially supported. The following steps assume you have either of these installed.</p> <p>To build, follow these steps:</p>"},{"location":"libbitcoin-network/Build/Linux/CMakePreset/#install-the-required-dependencies","title":"Install the required dependencies","text":"<pre><code>sudo apt-get install git build-essential autoconf automake libtool pkg-config\n</code></pre> <p>{CPU flag could be determined in order to enable hash function optimizations, more information about this will be added to the docs later}</p>"},{"location":"libbitcoin-network/Build/Linux/CMakePreset/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/libbitcoin/libbitcoin-network.git\n</code></pre>"},{"location":"libbitcoin-network/Build/Linux/CMakePreset/#execute-the-install-script","title":"Execute the install script","text":"<p>Navigate to the cloned repository and then execute the install script.</p> <p><code>./install-cmakepresets.sh --help</code> will display all the options.</p> <p>It can be either a <code>dynamic</code> build or a <code>static</code> build:</p> <p>Change the <code>build-dir</code> and <code>prefix</code> location if desired and use the desired parameters.</p>"},{"location":"libbitcoin-network/Build/Linux/CMakePreset/#dynamic","title":"Dynamic","text":"<p>Debug build with the default options and dynamic linking:</p> <pre><code>./install-cmakepresets.sh --build-dir=/home/user/libbitcoin-network/  --prefix=/home/user/libbitcoin-network/prefix/nix-gnu-debug-shared --preset=nix-gnu-debug-shared --disable-static --disable-ndebug -Denable-ndebug=no  --build-boost  --build-secp256k1\n</code></pre>"},{"location":"libbitcoin-network/Build/Linux/CMakePreset/#static","title":"Static","text":"<p>Build with static linking and ICU support:</p> <pre><code>./install-cmakepresets.sh --build-dir=/home/user/libbitcoin-network/  --prefix=/home/user/libbitcoin-network/prefix/nix-gnu-release-static --preset=nix-gnu-release-static --disable-shared --enable-ndebug -Denable-ndebug=yes  --build-boost --build-icu --with-icu --build-secp256k1\n</code></pre> <p>The library, and dependent libraries will now be build in the specified directory.</p>"},{"location":"libbitcoin-network/Build/Linux/Intro/","title":"Intro","text":""},{"location":"libbitcoin-network/Build/Linux/Intro/#linux-libbitcoin-network-build","title":"Linux libbitcoin-network build","text":"<p>On Linux, the following build systems are officially supported: Autotools, CMake List &amp; CMake Preset. There are 3 install scripts. One for Autotools (install.sh) , one for CMake List (Install-cmake.sh) and one for CMake Presets (install.sh-cmakepresets.sh). It can be build either static or dynamic. It is tested and officially supported on Debian/Ubuntu. The Continuous Integration Builds are on Ubuntu 24.04.2 LTS.</p>"},{"location":"libbitcoin-network/Build/Windows/Intro/","title":"Intro","text":""},{"location":"libbitcoin-network/Build/Windows/Intro/#windows-libbitcoin-network-build","title":"Windows libbitcoin-network build","text":"<p>On Windows, the MSBuild system is officially supported.</p> <p>The build can be either a static debug build, or a static release build. Both 32 and 64 bit are supported &amp; tested.</p>"},{"location":"libbitcoin-network/Build/Windows/MSBuild/","title":"Windows MSBuild","text":"<p>The libbitcoin-network library can be build either as a static debug version or a static release version.</p> <p>To build, follow these steps:</p>"},{"location":"libbitcoin-network/Build/Windows/MSBuild/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/libbitcoin/libbitcoin-network.git\n</code></pre>"},{"location":"libbitcoin-network/Build/Windows/MSBuild/#execute-the-install-script","title":"Execute the install script","text":"<p>Navigate to the cloned repository and then execute the install script.</p> <p>(.\\build.cmd .. ${ platform } ${ configuration } x64 ${ version })</p>"},{"location":"libbitcoin-network/Build/Windows/MSBuild/#static-debug","title":"Static Debug","text":"<p>Build with the default options and static linking:</p> <pre><code>.\\build.cmd .. x64 StaticDebug x64 vs2022\n</code></pre>"},{"location":"libbitcoin-network/Build/Windows/MSBuild/#static-release","title":"Static Release","text":"<p>Build with static linking:</p> <pre><code>.\\build.cmd .. x64 StaticRelease x64 vs2022\n</code></pre> <p>The library, and dependent libraries will now be build.</p>"},{"location":"libbitcoin-network/Build/macOS/Autotools/","title":"macOS Autotools Build","text":"<p>The libbitcoin-network library can be build either dynamic or static.</p> <p>Clang compiler is officially supported. The following steps assume you have it installed.</p> <p>To build, follow these steps:</p>"},{"location":"libbitcoin-network/Build/macOS/Autotools/#install-the-required-dependencies","title":"Install the required dependencies","text":"<pre><code>brew install autoconf automake libtool icu4c\n</code></pre> <p>{CPU flag could be determined in order to enable hash function optimizations, more information about this will be added to the docs later}</p>"},{"location":"libbitcoin-network/Build/macOS/Autotools/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/libbitcoin/libbitcoin-network.git\n</code></pre>"},{"location":"libbitcoin-network/Build/macOS/Autotools/#execute-the-install-script","title":"Execute the install script","text":"<p>Navigate to the cloned repository and then execute the install script.</p> <p><code>./install.sh --help</code> will display all the options.</p> <p>It can be either a <code>dynamic</code> build or a <code>static</code> build:</p> <p>Change the <code>build-dir</code> and <code>prefix</code> location if desired and use the desired parameters.</p>"},{"location":"libbitcoin-network/Build/macOS/Autotools/#dynamic","title":"Dynamic","text":"<p>Build with the default options and dynamic linking:</p> <pre><code>./install.sh --build-dir=/Users/libbitcoin-network/ --enable-isystem --prefix=/Users/libbitcoin-network/prefix --disable-static --enable-ndebug  --build-boost  --build-secp256k1\n</code></pre>"},{"location":"libbitcoin-network/Build/macOS/Autotools/#static","title":"Static","text":"<p>Build with static linking:</p> <pre><code>./install.sh --build-dir=/Users/libbitcoin-network/ --enable-isystem --prefix=/Users/libbitcoin-network/prefix --disable-shared --enable-ndebug  --build-boost  --build-secp256k1\n</code></pre> <p>The library, and dependent libraries will now be build in the specified directory.</p>"},{"location":"libbitcoin-network/Build/macOS/CMake/","title":"macOS CMake Build","text":"<p>The libbitcoin-network library can be build either dynamic or static.</p> <p>Clang compiler is officially supported. The following steps assume you have it installed.</p> <p>To build, follow these steps:</p>"},{"location":"libbitcoin-network/Build/macOS/CMake/#install-the-required-dependencies","title":"Install the required dependencies","text":"<pre><code>brew install autoconf automake libtool icu4c\n</code></pre> <p>{CPU flag could be determined in order to enable hash function optimizations, more information about this will be added to the docs later}</p>"},{"location":"libbitcoin-network/Build/macOS/CMake/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/libbitcoin/libbitcoin-network.git\n</code></pre>"},{"location":"libbitcoin-network/Build/macOS/CMake/#execute-the-install-script","title":"Execute the install script","text":"<p>Navigate to the cloned repository and then execute the install script.</p> <p><code>./install-cmake.sh --help</code> will display all the options.</p> <p>It can be either a <code>dynamic</code> build or a <code>static</code> build:</p> <p>Change the <code>build-dir</code> and <code>prefix</code> location if desired and use the desired parameters.</p>"},{"location":"libbitcoin-network/Build/macOS/CMake/#dynamic","title":"Dynamic","text":"<p>Build with the default options and dynamic linking:</p> <pre><code>./install-cmake.sh --build-dir=/Users/libbitcoin-network/  --prefix=/Users/libbitcoin-network/prefix --disable-static --enable-ndebug -Denable-ndebug=yes  --build-boost  --build-secp256k1\n</code></pre>"},{"location":"libbitcoin-network/Build/macOS/CMake/#static","title":"Static","text":"<p>Build with static linking:</p> <pre><code>./install-cmake.sh --build-dir=/Users/libbitcoin-network/  --prefix=/Users/libbitcoin-network/prefix --disable-shared --enable-ndebug -Denable-ndebug=yes  --build-boost  --build-secp256k1\n</code></pre> <p>The library, and dependent libraries will now be build in the specified directory.</p>"},{"location":"libbitcoin-network/Build/macOS/Intro/","title":"Intro","text":""},{"location":"libbitcoin-network/Build/macOS/Intro/#macos-libbitcoin-node-build","title":"macOS libbitcoin-node build","text":"<p>On macOS, Autotools and CMake build systems are officially supported.</p> <p>Each of these can be build either static or dynamic. It is tested and officially supported on latest macOS and ARM architecture. There are 2 install scripts. One for Autotools (install.sh) and one for CMake (install-cmake.sh). CLang compiler is officially supported.</p>"},{"location":"libbitcoin-node/intro/","title":"Libbitcoin Node","text":"<p>The libbitcoin-node library contains the Bitcoin full node.</p>"},{"location":"libbitcoin-node/Build/Linux/Autotools/","title":"Linux Autotools Build","text":"<p>The libbitcoin-node library can be build either dynamic or static.</p> <p>GCC and Clang are officially supported. The following steps assume you have either of these installed.</p> <p>To build, follow these steps:</p>"},{"location":"libbitcoin-node/Build/Linux/Autotools/#install-the-required-dependencies","title":"Install the required dependencies","text":"<pre><code>sudo apt-get install git build-essential autoconf automake libtool pkg-config\n</code></pre> <p>{CPU flag could be determined in order to enable hash function optimizations, more information about this will be added to the docs later}</p>"},{"location":"libbitcoin-node/Build/Linux/Autotools/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/libbitcoin/libbitcoin-node.git\n</code></pre>"},{"location":"libbitcoin-node/Build/Linux/Autotools/#execute-the-install-script","title":"Execute the install script","text":"<p>Navigate to the cloned repository and then execute the install script.</p> <p><code>./install.sh --help</code> will display all the options.</p> <p>It can be either a <code>dynamic</code> build or a <code>static</code> build:</p> <p>Change the <code>build-dir</code> and <code>prefix</code> location if desired and use the desired parameters.</p>"},{"location":"libbitcoin-node/Build/Linux/Autotools/#dynamic","title":"Dynamic","text":"<p>Build with the default options and dynamic linking:</p> <pre><code>./install.sh --build-dir=/home/user/libbitcoin-node/ --enable-isystem --prefix=/home/user/libbitcoin-node/prefix --disable-static --disable-ndebug  --build-boost  --build-secp256k1\n</code></pre>"},{"location":"libbitcoin-node/Build/Linux/Autotools/#static","title":"Static","text":"<p>Build with static linking and ICU support:</p> <pre><code>./install.sh --build-dir=/home/user/libbitcoin-node/ --enable-isystem --prefix=/home/user/libbitcoin-node/prefix --disable-shared --enable-ndebug  --build-boost --build-icu --with-icu --build-secp256k1\n</code></pre> <p>The library, and dependent libraries will now be build in the specified directory.</p>"},{"location":"libbitcoin-node/Build/Linux/CMakeList/","title":"Linux CMake List Build","text":"<p>The libbitcoin-node library can be build either dynamic or static.</p> <p>GCC and Clang are officially supported. The following steps assume you have either of these installed.</p> <p>To build, follow these steps:</p>"},{"location":"libbitcoin-node/Build/Linux/CMakeList/#install-the-required-dependencies","title":"Install the required dependencies","text":"<pre><code>sudo apt-get install git build-essential autoconf automake libtool pkg-config\n</code></pre> <p>{CPU flag could be determined in order to enable hash function optimizations, more information about this will be added to the docs later}</p>"},{"location":"libbitcoin-node/Build/Linux/CMakeList/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/libbitcoin/libbitcoin-node.git\n</code></pre>"},{"location":"libbitcoin-node/Build/Linux/CMakeList/#execute-the-install-script","title":"Execute the install script","text":"<p>Navigate to the cloned repository and then execute the install script.</p> <p><code>./install-cmake.sh --help</code> will display all the options.</p> <p>It can be either a <code>dynamic</code> build or a <code>static</code> build:</p> <p>Change the <code>build-dir</code> and <code>prefix</code> location if desired and use the desired parameters.</p>"},{"location":"libbitcoin-node/Build/Linux/CMakeList/#dynamic","title":"Dynamic","text":"<p>Build with the default options and dynamic linking:</p> <pre><code>./install-cmake.sh --build-dir=/home/user/libbitcoin-node/  --prefix=/home/user/libbitcoin-node/prefix --disable-static --disable-ndebug -Denable-ndebug=no  --build-boost  --build-secp256k1\n</code></pre>"},{"location":"libbitcoin-node/Build/Linux/CMakeList/#static","title":"Static","text":"<p>Build with static linking and ICU support:</p> <pre><code>./install-cmake.sh --build-dir=/home/user/libbitcoin-node/  --prefix=/home/user/libbitcoin-node/prefix --disable-shared --enable-ndebug -Denable-ndebug=yes  --build-boost --build-icu --with-icu --build-secp256k1\n</code></pre> <p>The library, and dependent libraries will now be build in the specified directory.</p>"},{"location":"libbitcoin-node/Build/Linux/CMakePreset/","title":"Linux CMake Preset Build","text":"<p>The libbitcoin-node library can be build either dynamic or static.</p> <p>GCC and Clang are officially supported. The following steps assume you have either of these installed.</p> <p>To build, follow these steps:</p>"},{"location":"libbitcoin-node/Build/Linux/CMakePreset/#install-the-required-dependencies","title":"Install the required dependencies","text":"<pre><code>sudo apt-get install git build-essential autoconf automake libtool pkg-config\n</code></pre> <p>{CPU flag could be determined in order to enable hash function optimizations, more information about this will be added to the docs later}</p>"},{"location":"libbitcoin-node/Build/Linux/CMakePreset/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/libbitcoin/libbitcoin-node.git\n</code></pre>"},{"location":"libbitcoin-node/Build/Linux/CMakePreset/#execute-the-install-script","title":"Execute the install script","text":"<p>Navigate to the cloned repository and then execute the install script.</p> <p><code>./install-cmakepresets.sh --help</code> will display all the options.</p> <p>It can be either a <code>dynamic</code> build or a <code>static</code> build:</p> <p>Change the <code>build-dir</code> and <code>prefix</code> location if desired and use the desired parameters.</p>"},{"location":"libbitcoin-node/Build/Linux/CMakePreset/#dynamic","title":"Dynamic","text":"<p>Debug build with the default options and dynamic linking:</p> <pre><code>./install-cmakepresets.sh --build-dir=/home/user/libbitcoin-node/  --prefix=/home/user/libbitcoin-node/prefix/nix-gnu-debug-shared --preset=nix-gnu-debug-shared --disable-static --disable-ndebug -Denable-ndebug=no  --build-boost  --build-secp256k1\n</code></pre>"},{"location":"libbitcoin-node/Build/Linux/CMakePreset/#static","title":"Static","text":"<p>Build with static linking and ICU support:</p> <pre><code>  ./install-cmakepresets.sh --build-dir=/home/user/libbitcoin-node/  --prefix=/home/user/libbitcoin-node/prefix/nix-gnu-release-static --preset=nix-gnu-release-static --disable-shared --enable-ndebug -Denable-ndebug=yes  --build-boost --build-icu --with-icu --build-secp256k1\n</code></pre> <p>The library, and dependent libraries will now be build in the specified directory.</p>"},{"location":"libbitcoin-node/Build/Linux/Intro/","title":"Intro","text":""},{"location":"libbitcoin-node/Build/Linux/Intro/#linux-libbitcoin-node-build","title":"Linux libbitcoin-node build","text":"<p>On Linux, the following build systems are officially supported: Autotools, CMake List &amp; CMake Preset. There are 3 install scripts. One for Autotools (install.sh) , one for CMake List (Install-cmake.sh) and one for CMake Presets (install.sh-cmakepresets.sh). It can be build either static or dynamic. It is tested and officially supported on Debian/Ubuntu. The Continuous Integration Builds are on Ubuntu 24.04.2 LTS.</p>"},{"location":"libbitcoin-node/Build/Windows/Intro/","title":"Intro","text":""},{"location":"libbitcoin-node/Build/Windows/Intro/#windows-libbitcoin-node-build","title":"Windows libbitcoin-node build","text":"<p>On Windows, the MSBuild system is officially supported.</p> <p>The build can be either a static debug build, or a static release build.</p>"},{"location":"libbitcoin-node/Build/Windows/MSBuild/","title":"Windows MSBuild","text":"<p>The libbitcoin-node library can be build either as a static debug version or a static release version.</p> <p>To build, follow these steps:</p>"},{"location":"libbitcoin-node/Build/Windows/MSBuild/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/libbitcoin/libbitcoin-node.git\n</code></pre>"},{"location":"libbitcoin-node/Build/Windows/MSBuild/#execute-the-install-script","title":"Execute the install script","text":"<p>Navigate to the cloned repository and then execute the install script.</p> <p>(.\\build.cmd .. ${ platform } ${ configuration } x64 ${ version })</p>"},{"location":"libbitcoin-node/Build/Windows/MSBuild/#static-debug","title":"Static Debug","text":"<p>Build with the default options and static linking:</p> <pre><code>.\\build.cmd .. x64 StaticDebug x64 vs2022\n</code></pre>"},{"location":"libbitcoin-node/Build/Windows/MSBuild/#static-release","title":"Static Release","text":"<p>Build with static linking:</p> <pre><code>.\\build.cmd .. x64 StaticRelease x64 vs2022\n</code></pre> <p>The library, and dependent libraries will now be build.</p>"},{"location":"libbitcoin-node/Build/macOS/Autotools/","title":"macOS Autotools Build","text":"<p>The libbitcoin-node library can be build either dynamic or static.</p> <p>Clang compiler is officially supported. The following steps assume you have it installed.</p> <p>To build, follow these steps:</p>"},{"location":"libbitcoin-node/Build/macOS/Autotools/#install-the-required-dependencies","title":"Install the required dependencies","text":"<pre><code>brew install autoconf automake libtool icu4c\n</code></pre> <p>{CPU flag could be determined in order to enable hash function optimizations, more information about this will be added to the docs later}</p>"},{"location":"libbitcoin-node/Build/macOS/Autotools/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/libbitcoin/libbitcoin-node.git\n</code></pre>"},{"location":"libbitcoin-node/Build/macOS/Autotools/#execute-the-install-script","title":"Execute the install script","text":"<p>Navigate to the cloned repository and then execute the install script.</p> <p><code>./install.sh --help</code> will display all the options.</p> <p>It can be either a <code>dynamic</code> build or a <code>static</code> build:</p> <p>Change the <code>build-dir</code> and <code>prefix</code> location if desired and use the desired parameters.</p>"},{"location":"libbitcoin-node/Build/macOS/Autotools/#dynamic","title":"Dynamic","text":"<p>Build with the default options and dynamic linking:</p> <pre><code>./install.sh --build-dir=/Users/libbitcoin-node/ --enable-isystem --prefix=/Users/libbitcoin-node/prefix --disable-static --enable-ndebug  --build-boost  --build-secp256k1\n</code></pre>"},{"location":"libbitcoin-node/Build/macOS/Autotools/#static","title":"Static","text":"<p>Build with static linking:</p> <pre><code>./install.sh --build-dir=/Users/libbitcoin-node/ --enable-isystem --prefix=/Users/libbitcoin-node/prefix --disable-shared --enable-ndebug  --build-boost  --build-secp256k1\n</code></pre> <p>The library, and dependent libraries will now be build in the specified directory.</p>"},{"location":"libbitcoin-node/Build/macOS/CMake/","title":"Libbitcoin-node Build Instructions","text":"<p>Please refer to the [GitHub Actions]https://github.com/libbitcoin/libbitcoin-node/actions/ for the latest build instructions. These include different OS'es, build systems, compilers etc.</p>"},{"location":"libbitcoin-node/Build/macOS/Intro/","title":"Intro","text":""},{"location":"libbitcoin-node/Build/macOS/Intro/#macos-libbitcoin-node-build","title":"macOS libbitcoin-node build","text":"<p>On macOS, Autotools and CMake build systems are officially supported.</p> <p>Each of these can be build either static or dynamic. It is tested and officially supported on latest macOS and ARM architecture. There are 2 install scripts. One for Autotools (install.sh) and one for CMake (install-cmake.sh). CLang compiler is officially supported.</p>"},{"location":"libbitcoin-protocol/intro/","title":"Libbitcoin Protocol","text":"<p>The libbitcoin-protocol library contains the Bitcoin blockchain query protocol.</p>"},{"location":"libbitcoin-protocol/Build/Linux/Autotools/","title":"Linux Autotools Build","text":"<p>The libbitcoin-protocol library can be build either dynamic or static.</p> <p>GCC and Clang compilers are officially supported. The following steps assume you have either of these installed.</p> <p>To build, follow these steps:</p>"},{"location":"libbitcoin-protocol/Build/Linux/Autotools/#install-the-required-dependencies","title":"Install the required dependencies","text":"<pre><code>sudo apt-get install git build-essential autoconf automake libtool pkg-config \n</code></pre> <p>{CPU flag could be determined in order to enable hash function optimizations, more information about this will be added to the docs later}</p>"},{"location":"libbitcoin-protocol/Build/Linux/Autotools/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/libbitcoin/libbitcoin-protocol.git\n</code></pre>"},{"location":"libbitcoin-protocol/Build/Linux/Autotools/#execute-the-install-script","title":"Execute the install script","text":"<p>Navigate to the cloned repository and then execute the install script.</p> <p><code>./install.sh --help</code> will display all the options.</p> <p>It can be either a <code>dynamic</code> build or a <code>static</code> build:</p> <p>Change the <code>build-dir</code> and <code>prefix</code> location if desired and use the desired parameters.</p>"},{"location":"libbitcoin-protocol/Build/Linux/Autotools/#dynamic","title":"Dynamic","text":"<p>Build with the default options and dynamic linking:</p> <pre><code>./install.sh --build-dir=/home/user/libbitcoin-protocol/ --enable-isystem --prefix=/home/user/libbitcoin-protocol/prefix --disable-static --disable-ndebug  --build-boost  --build-secp256k1 --build-zmq\n</code></pre>"},{"location":"libbitcoin-protocol/Build/Linux/Autotools/#static","title":"Static","text":"<p>Build with static linking and ICU support:</p> <pre><code>./install.sh --build-dir=/home/user/libbitcoin-protocol/ --enable-isystem --prefix=/home/user/libbitcoin-protocol/prefix --disable-shared --enable-ndebug  --build-boost --build-icu --with-icu --build-secp256k1 --build-zmq\n</code></pre> <p>The library, and dependent libraries will now be build in the specified directory.</p>"},{"location":"libbitcoin-protocol/Build/Linux/CMakeList/","title":"Linux CMake List Build","text":"<p>The libbitcoin-protocol library can be build either dynamic or static.</p> <p>GCC and Clang compilers are officially supported. The following steps assume you have either of these installed.</p> <p>To build, follow these steps:</p>"},{"location":"libbitcoin-protocol/Build/Linux/CMakeList/#install-the-required-dependencies","title":"Install the required dependencies","text":"<pre><code>sudo apt-get install git build-essential autoconf automake libtool pkg-config \n</code></pre> <p>{CPU flag could be determined in order to enable hash function optimizations, more information about this will be added to the docs later}</p>"},{"location":"libbitcoin-protocol/Build/Linux/CMakeList/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/libbitcoin/libbitcoin-protocol.git\n</code></pre>"},{"location":"libbitcoin-protocol/Build/Linux/CMakeList/#execute-the-install-script","title":"Execute the install script","text":"<p>Navigate to the cloned repository and then execute the install script.</p> <p><code>./install-cmake.sh --help</code> will display all the options.</p> <p>It can be either a <code>dynamic</code> build or a <code>static</code> build:</p> <p>Change the <code>build-dir</code> and <code>prefix</code> location if desired and use the desired parameters.</p>"},{"location":"libbitcoin-protocol/Build/Linux/CMakeList/#dynamic","title":"Dynamic","text":"<p>Build with the default options and dynamic linking:</p> <pre><code>./install-cmake.sh --build-dir=/home/user/libbitcoin-protocol/  --prefix=/home/user/libbitcoin-protocol/prefix --disable-static --disable-ndebug -Denable-ndebug=no  --build-boost  --build-secp256k1 --build-zmq\n</code></pre>"},{"location":"libbitcoin-protocol/Build/Linux/CMakeList/#static","title":"Static","text":"<p>Build with static linking and ICU support:</p> <pre><code>./install-cmake.sh --build-dir=/home/user/libbitcoin-protocol/  --prefix=/home/user/libbitcoin-protocol/prefix --disable-shared --enable-ndebug -Denable-ndebug=yes  --build-boost --build-icu --with-icu --build-secp256k1 --build-zmq\n</code></pre> <p>The library, and dependent libraries will now be build in the specified directory.</p>"},{"location":"libbitcoin-protocol/Build/Linux/CMakePreset/","title":"Linux CMake Preset Build","text":"<p>The libbitcoin-protocol library can be build either dynamic or static.</p> <p>GCC and Clang compilers are officially supported. The following steps assume you have either of these installed.</p> <p>To build, follow these steps:</p>"},{"location":"libbitcoin-protocol/Build/Linux/CMakePreset/#install-the-required-dependencies","title":"Install the required dependencies","text":"<pre><code>sudo apt-get install git build-essential autoconf automake libtool pkg-config\n</code></pre> <p>{CPU flag could be determined in order to enable hash function optimizations, more information about this will be added to the docs later}</p>"},{"location":"libbitcoin-protocol/Build/Linux/CMakePreset/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/libbitcoin/libbitcoin-protocol.git\n</code></pre>"},{"location":"libbitcoin-protocol/Build/Linux/CMakePreset/#execute-the-install-script","title":"Execute the install script","text":"<p>Navigate to the cloned repository and then execute the install script.</p> <p><code>./install-cmakepresets.sh --help</code> will display all the options.</p> <p>It can be either a <code>dynamic</code> build or a <code>static</code> build:</p> <p>Change the <code>build-dir</code> and <code>prefix</code> location if desired and use the desired parameters.</p>"},{"location":"libbitcoin-protocol/Build/Linux/CMakePreset/#dynamic","title":"Dynamic","text":"<p>Debug build with the default options and dynamic linking:</p> <pre><code>./install-cmakepresets.sh --build-dir=/home/user/libbitcoin-protocol/  --prefix=/home/user/libbitcoin-protocol/prefix/nix-gnu-debug-shared --preset=nix-gnu-debug-shared --disable-static --disable-ndebug -Denable-ndebug=no  --build-boost  --build-secp256k1 --build-zmq\n</code></pre>"},{"location":"libbitcoin-protocol/Build/Linux/CMakePreset/#static","title":"Static","text":"<p>Build with static linking and ICU support:</p> <pre><code>./install-cmakepresets.sh --build-dir=/home/user/libbitcoin-protocol/  --prefix=/home/user/libbitcoin-protocol/prefix/nix-gnu-release-static --preset=nix-gnu-release-static --disable-shared --enable-ndebug -Denable-ndebug=yes  --build-boost --build-icu --with-icu --build-secp256k1 --build-zmq\n</code></pre> <p>The library, and dependent libraries will now be build in the specified directory.</p>"},{"location":"libbitcoin-protocol/Build/Linux/Intro/","title":"Intro","text":""},{"location":"libbitcoin-protocol/Build/Linux/Intro/#linux-libbitcoin-protocol-build","title":"Linux libbitcoin-protocol build","text":"<p>On Linux, the following build systems are officially supported: Autotools, CMake List &amp; CMake Preset. There are 3 install scripts. One for Autotools (install.sh) , one for CMake List (Install-cmake.sh) and one for CMake Presets (install.sh-cmakepresets.sh). It can be build either static or dynamic. It is tested and officially supported on Debian/Ubuntu. The Continuous Integration Builds are on Ubuntu 24.04.2 LTS.</p>"},{"location":"libbitcoin-protocol/Build/Windows/Intro/","title":"Intro","text":""},{"location":"libbitcoin-protocol/Build/Windows/Intro/#windows-libbitcoin-protocol-build","title":"Windows libbitcoin-protocol build","text":"<p>On Windows, the MSBuild system is officially supported.</p> <p>The build can be either a static debug build, or a static release build. Both 32 and 64 bit are supported &amp; tested.</p>"},{"location":"libbitcoin-protocol/Build/Windows/MSBuild/","title":"Windows MSBuild","text":"<p>The libbitcoin-protocol library can be build either as a static debug version or a static release version, and Win32 or x64.</p> <p>To build, follow these steps:</p>"},{"location":"libbitcoin-protocol/Build/Windows/MSBuild/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/libbitcoin/libbitcoin-protocol.git\n</code></pre>"},{"location":"libbitcoin-protocol/Build/Windows/MSBuild/#execute-the-install-script","title":"Execute the install script","text":"<p>Navigate to the cloned repository and then execute the install script.</p> <p>(.\\build.cmd .. ${ platform } ${ configuration } x64 ${ version })</p>"},{"location":"libbitcoin-protocol/Build/Windows/MSBuild/#static-debug","title":"Static Debug","text":"<p>Build with the default options and static linking:</p> <pre><code>.\\build.cmd .. x64 StaticDebug x64 vs2022\n</code></pre>"},{"location":"libbitcoin-protocol/Build/Windows/MSBuild/#static-release","title":"Static Release","text":"<p>Build with static linking:</p> <pre><code>.\\build.cmd .. x64 StaticRelease x64 vs2022\n</code></pre> <p>The library, and dependent libraries will now be build.</p>"},{"location":"libbitcoin-protocol/Build/macOS/Autotools/","title":"macOS Autotools Build","text":"<p>The libbitcoin-protocol library can be build either dynamic or static.</p> <p>Clang compiler is officially supported. The following steps assume you have it installed.</p> <p>To build, follow these steps:</p>"},{"location":"libbitcoin-protocol/Build/macOS/Autotools/#install-the-required-dependencies","title":"Install the required dependencies","text":"<pre><code>brew install autoconf automake libtool icu4c\n</code></pre> <p>{CPU flag could be determined in order to enable hash function optimizations, more information about this will be added to the docs later}</p>"},{"location":"libbitcoin-protocol/Build/macOS/Autotools/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/libbitcoin/libbitcoin-protocol.git\n</code></pre>"},{"location":"libbitcoin-protocol/Build/macOS/Autotools/#execute-the-install-script","title":"Execute the install script","text":"<p>Navigate to the cloned repository and then execute the install script.</p> <p><code>./install.sh --help</code> will display all the options.</p> <p>It can be either a <code>dynamic</code> build or a <code>static</code> build:</p> <p>Change the <code>build-dir</code> and <code>prefix</code> location if desired and use the desired parameters.</p>"},{"location":"libbitcoin-protocol/Build/macOS/Autotools/#dynamic","title":"Dynamic","text":"<p>Build with the default options and dynamic linking:</p> <pre><code>./install.sh --build-dir=/Users/libbitcoin-protocol/ --enable-isystem --prefix=/Users/libbitcoin-protocol/prefix --disable-static --enable-ndebug  --build-boost  --build-secp256k1 --build-zmq\n</code></pre>"},{"location":"libbitcoin-protocol/Build/macOS/Autotools/#static","title":"Static","text":"<p>Build with static linking:</p> <pre><code>./install.sh --build-dir=/Users/libbitcoin-protocol/ --enable-isystem --prefix=/Users/libbitcoin-protocol/prefix --disable-shared --enable-ndebug  --build-boost  --build-secp256k1 --build-zmq\n</code></pre> <p>The library, and dependent libraries will now be build in the specified directory.</p>"},{"location":"libbitcoin-protocol/Build/macOS/CMake/","title":"macOS CMake Build","text":"<p>The libbitcoin-protocol library can be build either dynamic or static.</p> <p>Clang compiler is officially supported. The following steps assume you have it installed.</p> <p>To build, follow these steps:</p>"},{"location":"libbitcoin-protocol/Build/macOS/CMake/#install-the-required-dependencies","title":"Install the required dependencies","text":"<pre><code>brew install autoconf automake libtool icu4c\n</code></pre> <p>{CPU flag could be determined in order to enable hash function optimizations, more information about this will be added to the docs later}</p>"},{"location":"libbitcoin-protocol/Build/macOS/CMake/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/libbitcoin/libbitcoin-protocol.git\n</code></pre>"},{"location":"libbitcoin-protocol/Build/macOS/CMake/#execute-the-install-script","title":"Execute the install script","text":"<p>Navigate to the cloned repository and then execute the install script.</p> <p><code>./install-cmake.sh --help</code> will display all the options.</p> <p>It can be either a <code>dynamic</code> build or a <code>static</code> build:</p> <p>Change the <code>build-dir</code> and <code>prefix</code> location if desired and use the desired parameters.</p>"},{"location":"libbitcoin-protocol/Build/macOS/CMake/#dynamic","title":"Dynamic","text":"<p>Build with the default options and dynamic linking:</p> <pre><code>./install-cmake.sh --build-dir=/Users/libbitcoin-protocol/  --prefix=/Users/libbitcoin-protocol/prefix --disable-static --enable-ndebug -Denable-ndebug=yes  --build-boost  --build-secp256k1 --build-zmq\n</code></pre>"},{"location":"libbitcoin-protocol/Build/macOS/CMake/#static","title":"Static","text":"<p>Build with static linking:</p> <pre><code>./install-cmake.sh --build-dir=/Users/libbitcoin-protocol/  --prefix=/Users/libbitcoin-protocol/prefix --disable-shared --enable-ndebug -Denable-ndebug=yes  --build-boost  --build-secp256k1 --build-zmq\n</code></pre> <p>The library, and dependent libraries will now be build in the specified directory.</p>"},{"location":"libbitcoin-protocol/Build/macOS/Intro/","title":"Intro","text":""},{"location":"libbitcoin-protocol/Build/macOS/Intro/#macos-libbitcoin-protocol-build","title":"macOS libbitcoin-protocol build","text":"<p>On macOS, Autotools and CMake build systems are officially supported.</p> <p>Each of these can be build either static or dynamic. It is tested and officially supported on latest macOS and ARM architecture. There are 2 install scripts. One for Autotools (install.sh) and one for CMake (install-cmake.sh). CLang compiler is officially supported.</p>"},{"location":"libbitcoin-server/Build/","title":"Libbitcoin-server Build Instructions","text":"<p>Currently, libbitcoin-server latest master does not build as it is out of sync with other libraries. Only latest release(s) can be used/build.</p>"},{"location":"libbitcoin-server/intro/","title":"Libbitcoin Server","text":"<p>The libbitcoin-server library contains a Bitcoin full node and query server.</p>"},{"location":"libbitcoin-system/intro/","title":"Libbitcoin System","text":"<p>The libbitcoin-system library is the fundamental library which all other libraries depend upon. It contains basic Bitcoin concepts, like the consensus code, cryptography, hashing libraries and the Libbitcoin file system.</p>"},{"location":"libbitcoin-system/Build/Linux/Autotools/","title":"Linux Autotools Build","text":"<p>The libbitcoin-system library can be build either dynamic or static.</p> <p>GCC and Clang are officially supported. The following steps assume you have either of these installed.</p> <p>To build, follow these steps:</p>"},{"location":"libbitcoin-system/Build/Linux/Autotools/#install-the-required-dependencies","title":"Install the required dependencies","text":"<pre><code>sudo apt-get install git build-essential autoconf automake libtool pkg-config \n</code></pre> <p>{CPU flag could be determined in order to enable hash function optimizations, more information about this will be added to the docs later}</p>"},{"location":"libbitcoin-system/Build/Linux/Autotools/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/libbitcoin/libbitcoin-system.git\n</code></pre>"},{"location":"libbitcoin-system/Build/Linux/Autotools/#execute-the-install-script","title":"Execute the install script","text":"<p>Navigate to the cloned repository and then execute the install script.</p> <p><code>./install.sh --help</code> will display all the options.</p> <p>It can be either a <code>dynamic</code> build or a <code>static</code> build:</p> <p>Change the <code>build-dir</code> and <code>prefix</code> location if desired and use the desired parameters.</p>"},{"location":"libbitcoin-system/Build/Linux/Autotools/#dynamic","title":"Dynamic","text":"<p>Build with the default options and dynamic linking:</p> <pre><code>./install.sh --build-dir=/home/user/libbitcoin-system/ --enable-isystem --enable-avx2 --enable-sse41 --prefix=/home/user/libbitcoin-system/prefix --disable-static --disable-ndebug  --build-boost  --build-secp256k1\n</code></pre>"},{"location":"libbitcoin-system/Build/Linux/Autotools/#static","title":"Static","text":"<p>Build with static linking and ICU support:</p> <pre><code>./install.sh --build-dir=/home/user/libbitcoin-system/ --enable-isystem --enable-avx2 --prefix=/home/user/libbitcoin-system/prefix --disable-shared --enable-ndebug  --build-boost --build-icu --with-icu --build-secp256k1\n</code></pre> <p>The library, and dependent libraries will now be build in the specified directory.</p>"},{"location":"libbitcoin-system/Build/Linux/CMakeList/","title":"Linux CMake List Build","text":"<p>The libbitcoin-system library can be build either dynamic or static.</p> <p>GCC and Clang compilers are officially supported. The following steps assume you have either of these installed.</p> <p>To build, follow these steps:</p>"},{"location":"libbitcoin-system/Build/Linux/CMakeList/#install-the-required-dependencies","title":"Install the required dependencies","text":"<pre><code>sudo apt-get install git build-essential autoconf automake libtool pkg-config \n</code></pre> <p>{CPU flag could be determined in order to enable hash function optimizations, more information about this will be added to the docs later}</p>"},{"location":"libbitcoin-system/Build/Linux/CMakeList/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/libbitcoin/libbitcoin-system.git\n</code></pre>"},{"location":"libbitcoin-system/Build/Linux/CMakeList/#execute-the-install-script","title":"Execute the install script","text":"<p>Navigate to the cloned repository and then execute the install script.</p> <p><code>./install-cmake.sh --help</code> will display all the options.</p> <p>It can be either a <code>dynamic</code> build or a <code>static</code> build:</p> <p>Change the <code>build-dir</code> and <code>prefix</code> location if desired and use the desired parameters.</p>"},{"location":"libbitcoin-system/Build/Linux/CMakeList/#dynamic","title":"Dynamic","text":"<p>Build with the default options and dynamic linking:</p> <pre><code>./install-cmake.sh --build-dir=/home/user/libbitcoin-system/ -Denable-avx2=on -Denable-sse41=on --prefix=/home/user/libbitcoin-system/prefix --disable-static --disable-ndebug -Denable-ndebug=no  --build-boost  --build-secp256k1\n</code></pre>"},{"location":"libbitcoin-system/Build/Linux/CMakeList/#static","title":"Static","text":"<p>Build with static linking and ICU support:</p> <pre><code>./install-cmake.sh --build-dir=/home/user/libbitcoin-system/ -Denable-avx2=on --prefix=/home/user/libbitcoin-system/prefix --disable-shared --enable-ndebug -Denable-ndebug=yes  --build-boost --build-icu --with-icu --build-secp256k1\n</code></pre> <p>The library, and dependent libraries will now be build in the specified directory.</p>"},{"location":"libbitcoin-system/Build/Linux/CMakePreset/","title":"Linux CMake Preset Build","text":"<p>The libbitcoin-system library can be build either dynamic or static.</p> <p>GCC and Clang compilers are officially supported. The following steps assume you have either of these installed.</p> <p>To build, follow these steps:</p>"},{"location":"libbitcoin-system/Build/Linux/CMakePreset/#install-the-required-dependencies","title":"Install the required dependencies","text":"<pre><code>sudo apt-get install git build-essential autoconf automake libtool pkg-config\n</code></pre> <p>{CPU flag could be determined in order to enable hash function optimizations, more information about this will be added to the docs later}</p>"},{"location":"libbitcoin-system/Build/Linux/CMakePreset/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/libbitcoin/libbitcoin-system.git\n</code></pre>"},{"location":"libbitcoin-system/Build/Linux/CMakePreset/#execute-the-install-script","title":"Execute the install script","text":"<p>Navigate to the cloned repository and then execute the install script.</p> <p><code>./install-cmakepresets.sh --help</code> will display all the options.</p> <p>It can be either a <code>dynamic</code> build or a <code>static</code> build:</p> <p>Change the <code>build-dir</code> and <code>prefix</code> location if desired and use the desired parameters.</p>"},{"location":"libbitcoin-system/Build/Linux/CMakePreset/#dynamic","title":"Dynamic","text":"<p>Debug build with the default options and dynamic linking:</p> <pre><code>./install-cmakepresets.sh --build-dir=/home/user/libbitcoin-system/ -Denable-avx2=on -Denable-sse41=on --prefix=/home/user/libbitcoin-system/prefix/nix-gnu-debug-shared --preset=nix-gnu-debug-shared --disable-static --disable-ndebug -Denable-ndebug=no  --build-boost  --build-secp256k1\n</code></pre>"},{"location":"libbitcoin-system/Build/Linux/CMakePreset/#static","title":"Static","text":"<p>Build with static linking and ICU support:</p> <pre><code>./install-cmakepresets.sh --build-dir=/home/user/libbitcoin-system/ -Denable-avx2=on --prefix=/home/user/libbitcoin-system/prefix/nix-gnu-release-static --preset=nix-gnu-release-static --disable-shared --enable-ndebug -Denable-ndebug=yes  --build-boost --build-icu --with-icu --build-secp256k1\n</code></pre> <p>The library, and dependent libraries will now be build in the specified directory.</p>"},{"location":"libbitcoin-system/Build/Linux/Intro/","title":"Intro","text":""},{"location":"libbitcoin-system/Build/Linux/Intro/#linux-libbitcoin-system-build","title":"Linux libbitcoin-system build","text":"<p>On Linux, the following build systems are officially supported: Autotools, CMake List &amp; CMake Preset. There are 3 install scripts. One for Autotools (install.sh) , one for CMake List (Install-cmake.sh) and one for CMake Presets (install.sh-cmakepresets.sh). It can be build either static or dynamic. It is tested and officially supported on Debian/Ubuntu. The Continuous Integration Builds are on Ubuntu 24.04.2 LTS.</p>"},{"location":"libbitcoin-system/Build/Windows/Intro/","title":"Intro","text":""},{"location":"libbitcoin-system/Build/Windows/Intro/#windows-libbitcoin-system-build","title":"Windows libbitcoin-system build","text":"<p>On Windows, the MSBuild system is officially supported.</p> <p>The build can be either a static debug build, or a static release build. Both 32 and 64 bit are supported &amp; tested.</p>"},{"location":"libbitcoin-system/Build/Windows/MSBuild/","title":"Windows MSBuild","text":"<p>The libbitcoin-system library can be build either as a static debug version or a static release version, and Win32 or x64.</p> <p>To build, follow these steps:</p>"},{"location":"libbitcoin-system/Build/Windows/MSBuild/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/libbitcoin/libbitcoin-system.git\n</code></pre>"},{"location":"libbitcoin-system/Build/Windows/MSBuild/#execute-the-install-script","title":"Execute the install script","text":"<p>Navigate to the cloned repository and then execute the install script.</p> <p>(.\\build.cmd .. ${ platform } ${ configuration } x64 ${ version })</p>"},{"location":"libbitcoin-system/Build/Windows/MSBuild/#static-debug","title":"Static Debug","text":"<p>Build with the default options and static linking:</p> <pre><code>.\\build.cmd .. x64 StaticDebug x64 vs2022\n</code></pre>"},{"location":"libbitcoin-system/Build/Windows/MSBuild/#static-release","title":"Static Release","text":"<p>Build with static linking:</p> <pre><code>.\\build.cmd .. x64 StaticRelease x64 vs2022\n</code></pre> <p>The library, and dependent libraries will now be build.</p>"},{"location":"libbitcoin-system/Build/macOS/Autotools/","title":"macOS Autotools Build","text":"<p>The libbitcoin-system library can be build either dynamic or static.</p> <p>Clang compiler is officially supported. The following steps assume you have it installed.</p> <p>To build, follow these steps:</p>"},{"location":"libbitcoin-system/Build/macOS/Autotools/#install-the-required-dependencies","title":"Install the required dependencies","text":"<pre><code>brew install autoconf automake libtool icu4c\n</code></pre> <p>{CPU flag could be determined in order to enable hash function optimizations, more information about this will be added to the docs later}</p>"},{"location":"libbitcoin-system/Build/macOS/Autotools/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/libbitcoin/libbitcoin-system.git\n</code></pre>"},{"location":"libbitcoin-system/Build/macOS/Autotools/#execute-the-install-script","title":"Execute the install script","text":"<p>Navigate to the cloned repository and then execute the install script.</p> <p><code>./install.sh --help</code> will display all the options.</p> <p>It can be either a <code>dynamic</code> build or a <code>static</code> build:</p> <p>Change the <code>build-dir</code> and <code>prefix</code> location if desired and use the desired parameters.</p>"},{"location":"libbitcoin-system/Build/macOS/Autotools/#dynamic","title":"Dynamic","text":"<p>Build with the default options and dynamic linking:</p> <pre><code>./install.sh --build-dir=/Users/libbitcoin-system/ --enable-isystem --prefix=/Users/libbitcoin-system/prefix --disable-static --enable-ndebug  --build-boost  --build-secp256k1\n</code></pre>"},{"location":"libbitcoin-system/Build/macOS/Autotools/#static","title":"Static","text":"<p>Build with static linking:</p> <pre><code>./install.sh --build-dir=/Users/libbitcoin-system/ --enable-isystem --prefix=/Users/libbitcoin-system/prefix --disable-shared --enable-ndebug  --build-boost  --build-secp256k1\n</code></pre> <p>The library, and dependent libraries will now be build in the specified directory.</p>"},{"location":"libbitcoin-system/Build/macOS/CMake/","title":"macOS CMake Build","text":"<p>The libbitcoin-system library can be build either dynamic or static.</p> <p>Clang compiler is officially supported. The following steps assume you have it installed.</p> <p>To build, follow these steps:</p>"},{"location":"libbitcoin-system/Build/macOS/CMake/#install-the-required-dependencies","title":"Install the required dependencies","text":"<pre><code>brew install autoconf automake libtool icu4c\n</code></pre> <p>{CPU flag could be determined in order to enable hash function optimizations, more information about this will be added to the docs later}</p>"},{"location":"libbitcoin-system/Build/macOS/CMake/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone https://github.com/libbitcoin/libbitcoin-system.git\n</code></pre>"},{"location":"libbitcoin-system/Build/macOS/CMake/#execute-the-install-script","title":"Execute the install script","text":"<p>Navigate to the cloned repository and then execute the install script.</p> <p><code>./install-cmake.sh --help</code> will display all the options.</p> <p>It can be either a <code>dynamic</code> build or a <code>static</code> build:</p> <p>Change the <code>build-dir</code> and <code>prefix</code> location if desired and use the desired parameters.</p>"},{"location":"libbitcoin-system/Build/macOS/CMake/#dynamic","title":"Dynamic","text":"<p>Build with the default options and dynamic linking:</p> <pre><code>./install-cmake.sh --build-dir=/Users/libbitcoin-system/  --prefix=/Users/libbitcoin-system/prefix --disable-static --enable-ndebug -Denable-ndebug=yes  --build-boost  --build-secp256k1\n</code></pre>"},{"location":"libbitcoin-system/Build/macOS/CMake/#static","title":"Static","text":"<p>Build with static linking:</p> <pre><code>./install-cmake.sh --build-dir=/Users/libbitcoin-system/  --prefix=/Users/libbitcoin-system/prefix --disable-shared --enable-ndebug -Denable-ndebug=yes  --build-boost  --build-secp256k1\n</code></pre> <p>The library, and dependent libraries will now be build in the specified directory.</p>"},{"location":"libbitcoin-system/Build/macOS/Intro/","title":"Intro","text":""},{"location":"libbitcoin-system/Build/macOS/Intro/#macos-libbitcoin-system-build","title":"macOS libbitcoin-system build","text":"<p>On macOS, Autotools and CMake build systems are officially supported.</p> <p>Each of these can be build either static or dynamic. It is tested and officially supported on latest macOS and ARM architecture. There are 2 install scripts. One for Autotools (install.sh) and one for CMake (install-cmake.sh). CLang compiler is officially supported.</p>"}]}